import asyncio
import logging
import os
import shutil

from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardMarkup, InlineKeyboardButton

from database import initialize_database, add_subscription, remove_subscription, get_subscriptions
from instagram_parser import login, get_new_posts, get_new_posts_count, get_stories, delete_temp_file
from scheduler import start_scheduler
from config.config import TELEGRAM_TOKEN, INSTAGRAM_USERNAME, INSTAGRAM_PASSWORD


###############################
# –ù–ê–°–¢–†–û–ô–ö–ò –ò –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
###############################
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

###############################
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê
###############################
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
router = Router()

###############################
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–õ–û–í–ê–†–ò
###############################
# –•—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_actions = {}  # {user_id: {"action": "..."}}
# –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (—á—Ç–æ–±—ã —É–¥–∞–ª—è—Ç—å —Å—Ç–∞—Ä—ã–µ)
last_bot_message = {}  # {user_id: message_id}
# –•—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_lang = {}  # {user_id: "ru" | "en"}

###############################
# –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–Ø
###############################
LOCALES = {
    "ru": {
        "choose_language": "Choose a language:",
        "lang_chosen": "–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: –†—É—Å—Å–∫–∏–π.",
        "start_text": "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤ Instagram. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "cancel_done": "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",

        "view_story": "üì± –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
        "view_post": "üì∑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é",
        "add_account": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
        "remove_account": "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
        "my_subscriptions": "üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏",

        "cancel_action": "üîô –ù–∞–∑–∞–¥",

        "ask_username_add": "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∞–∫–∫–∞—É–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:",
        "ask_username_remove": "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∞–∫–∫–∞—É–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
        "ask_username_story": "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∞–∫–∫–∞—É–Ω—Ç–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –∏—Å—Ç–æ—Ä–∏–∏:",
        "ask_username_post": "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∞–∫–∫–∞—É–Ω—Ç–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
        "my_subscriptions": "üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏",
        "no_subs": "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.",
        "subs_list_header": "–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n",
        "found_publications": "üìÑ –ù–∞–π–¥–µ–Ω–æ {count} –ø—É–±–ª–∏–∫–∞—Ü–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é:",
        "no_publications_user": "‚ùå –£ –∞–∫–∫–∞—É–Ω—Ç–∞ {username} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π.",
        "no_publications_plain": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "publications_error": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "add_account_success": "‚úÖ –ê–∫–∫–∞—É–Ω—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω.",
        "add_account_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "remove_account_success": "‚ùå –ê–∫–∫–∞—É–Ω—Ç {username} —É–¥–∞–ª—ë–Ω.",
        "remove_account_error": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "stories_sent": "–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!",
        "stories_error": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "stories_none": "‚ùå –£ –∞–∫–∫–∞—É–Ω—Ç–∞ {username} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π.",
        "unknown_action": "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        "pick_command": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é:",
        "bot_owner_text": "–Ø –Ω–µ –º–æ–≥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.",
        "loading": "–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",

        "change_language" : "üåç –ü–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫"
    },
    "en": {
        "choose_language": "Choose a language:",
        "lang_chosen": "Language selected: English.",
        "start_text": "üëã Hello! I will help you track Instagram posts and stories. Choose an action:",
        "cancel_done": "‚ùå Action canceled. Choose another action:",

        "view_story": "üì± View story",
        "view_post": "üì∑ View publication",
        "add_account": "‚ûï Add account",
        "remove_account": "‚ûñ Delete account",
        "my_subscriptions": "üìã My subscriptions",

        "cancel_action": "üîô Back",

        "ask_username_add": "Enter the username you want to add:",
        "ask_username_remove": "Enter the username you want to remove:",
        "ask_username_story": "Enter the username to view stories:",
        "ask_username_post": "üîç Enter the username to view posts:",
        "my_subscriptions": "üìã My subscriptions",
        "no_subs": "‚ùå You have no subscriptions yet.",
        "subs_list_header": "Your subscriptions:\n",
        "found_publications": "üìÑ Found {count} publications. Choose one:",
        "no_publications_user": "‚ùå This user has no available publications: {username}",
        "no_publications_plain": "‚ùå Could not load the publication. Try again.",
        "publications_error": "‚ùå Could not retrieve publications. Try later.",
        "add_account_success": "‚úÖ Account {username} has been added.",
        "add_account_error": "‚ùå Unable to add account. Try later.",
        "remove_account_success": "‚ùå Account {username} has been removed.",
        "remove_account_error": "‚ùå Could not remove the account. Try later.",
        "stories_sent": "All available stories have been sent!",
        "stories_error": "‚ùå Could not retrieve stories. Try later.",
        "stories_none": "‚ùå This user has no available stories: {username}",
        "unknown_action": "‚ùå Unknown action. Returning to main menu.",
        "pick_command": "Please choose a command from the menu:",
        "bot_owner_text": "I cannot track my creator.",
        "loading": "Loading‚Ä¶ Please wait...",

        "change_language" : "üåé Change language"
    }
}

def get_lang(user_id: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'ru', –µ—Å–ª–∏ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ).
    """
    return user_lang.get(user_id, "ru")

def t(user_id: int, key: str, **kwargs) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ LOCALES.
    """
    lang = get_lang(user_id)
    translation_dict = LOCALES.get(lang, LOCALES["ru"])
    text = translation_dict.get(key, f"[[{key}]]")
    if kwargs:
        text = text.format(**kwargs)
    return text

###############################
# –í–´–ë–û–† –Ø–ó–´–ö–ê: –ö–õ–ê–í–ò–ê–¢–£–†–ê –ò –û–ë–†–ê–ë–û–¢–ö–ê
###############################
def choose_language_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="lang:ru"),
            InlineKeyboardButton(text="English", callback_data="lang:en")
        ],
        [
            InlineKeyboardButton(text="‚ùå", callback_data="cancel")
        ]
    ])

@router.callback_query(lambda c: c.data.startswith("lang:"))
async def language_chosen(callback: CallbackQuery):
    user_id = callback.from_user.id
    lang_code = callback.data.split(":")[1]
    if lang_code not in ["ru", "en"]:
        await callback.answer("Unsupported language!")
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫
    user_lang[user_id] = lang_code
    await callback.answer(t(user_id, "lang_chosen"))
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.edit_text(
        t(user_id, "start_text"),
        reply_markup=start_keyboard(user_id)
    )

###############################
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–¢–ü–†–ê–í–ö–ò
###############################
async def delete_previous_message_if_exists(chat_id: int):
    old_msg_id = last_bot_message.get(chat_id)
    if old_msg_id:
        try:
            await bot.delete_message(chat_id, old_msg_id)
        except Exception as e:
            logging.warning(f"Failed to delete message {old_msg_id}: {e}")

async def send_text_message(chat_id: int, user_id: int, key: str, reply_markup=None, **fmt_kwargs):
    """
    –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ (—á–µ—Ä–µ–∑ key).
    """
    await delete_previous_message_if_exists(chat_id)
    text = t(user_id, key, **fmt_kwargs)
    new_msg = await bot.send_message(chat_id, text, reply_markup=reply_markup)
    last_bot_message[chat_id] = new_msg.message_id
    return new_msg

async def send_custom_text(chat_id: int, text: str, user_id: int, reply_markup=None):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏.
    """
    await delete_previous_message_if_exists(chat_id)
    new_msg = await bot.send_message(chat_id, text, reply_markup=reply_markup)
    last_bot_message[chat_id] = new_msg.message_id
    return new_msg

async def send_photo_message(chat_id: int, photo, user_id: int, caption_key=None, **fmt):
    """
    –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ
    caption_key => –∫–ª—é—á –∏–∑ LOCALES (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    await delete_previous_message_if_exists(chat_id)
    caption_text = t(user_id, caption_key, **fmt) if caption_key else ""
    new_msg = await bot.send_photo(chat_id, photo=photo, caption=caption_text)
    last_bot_message[chat_id] = new_msg.message_id
    return new_msg

async def send_video_message(chat_id: int, video, user_id: int, caption_key=None, **fmt):
    """
    –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ send_photo_message
    """
    await delete_previous_message_if_exists(chat_id)
    caption_text = t(user_id, caption_key, **fmt) if caption_key else ""
    new_msg = await bot.send_video(chat_id, video=video, caption=caption_text)
    last_bot_message[chat_id] = new_msg.message_id
    return new_msg

async def send_loading_message(chat_id: int, user_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶" (–∏–ª–∏ "Loading...")
    """
    await delete_previous_message_if_exists(chat_id)
    new_msg = await bot.send_message(chat_id, t(user_id, "loading"))
    last_bot_message[chat_id] = new_msg.message_id
    return new_msg.message_id

###############################
# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
###############################
def start_keyboard(user_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=t(user_id, "view_story"), callback_data="ask_username_story")],
        [InlineKeyboardButton(text=t(user_id, "view_post"), callback_data="ask_username_post")],
        [InlineKeyboardButton(text=t(user_id, "add_account"), callback_data="ask_username_add")],
        [InlineKeyboardButton(text=t(user_id, "remove_account"), callback_data="ask_username_remove")],
        [InlineKeyboardButton(text=t(user_id, "my_subscriptions"), callback_data="list_subscriptions")],
        [InlineKeyboardButton(text=t(user_id, "change_language"), callback_data="choose_language")]
    ])

def generate_post_pagination_keyboard(user_id: int, current_page, total_pages, posts_per_page):
    keyboard = []
    start_index = (current_page - 1) * posts_per_page + 1
    end_index = min(current_page * posts_per_page, total_pages * posts_per_page)

    for i in range(start_index, end_index + 1):
        keyboard.append([InlineKeyboardButton(text=str(i), callback_data=f"select_post:{i}")])

    nav_buttons = []
    if current_page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"page:{current_page - 1}"))
    if current_page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"page:{current_page + 1}"))
    nav_buttons.append(InlineKeyboardButton(text=t(user_id, "cancel_action"), callback_data="cancel"))
    keyboard.append(nav_buttons)
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

###############################
# –•–ï–ù–î–õ–ï–†–´
###############################
@router.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    user_actions.pop(user_id, None)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤—ã–±–∏—Ä–∞–ª —è–∑—ã–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
    if user_id not in user_lang:
        await message.answer(LOCALES["ru"]["choose_language"], reply_markup=choose_language_keyboard())
    else:
        await message.answer(
            t(user_id, "start_text"),
            reply_markup=start_keyboard(user_id)
        )

@router.callback_query(lambda c: c.data == "choose_language")
async def callback_choose_language(callback: CallbackQuery):
    user_id = callback.from_user.id
    await callback.answer()
    await callback.message.edit_text(
        LOCALES["ru"]["choose_language"],  # –ò–ª–∏ –±—Ä–∞—Ç—å t(user_id, "choose_language") –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ
        reply_markup=choose_language_keyboard()
    )

@router.callback_query(lambda q: q.data == "cancel")
async def handle_cancel(callback: CallbackQuery):
    user_id = callback.from_user.id
    await callback.answer()
    user_actions.pop(user_id, None)
    await callback.message.edit_text(
        t(user_id, "cancel_done"),
        reply_markup=start_keyboard(user_id)
    )

@router.callback_query(lambda q: q.data == "ask_username_add")
async def cb_add_account(callback: CallbackQuery):
    user_id = callback.from_user.id
    await callback.answer()
    user_actions[user_id] = {"action": "add_account"}
    await callback.message.edit_text(
        t(user_id, "ask_username_add"),
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=t(user_id, "cancel_action"), callback_data="cancel")]]
        )
    )

@router.callback_query(lambda q: q.data == "ask_username_remove")
async def cb_remove_account(callback: CallbackQuery):
    user_id = callback.from_user.id
    await callback.answer()
    user_actions[user_id] = {"action": "remove_account"}
    await callback.message.edit_text(
        t(user_id, "ask_username_remove"),
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=t(user_id, "cancel_action"), callback_data="cancel")]]
        )
    )

@router.callback_query(lambda q: q.data == "ask_username_story")
async def view_story_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    await callback.answer()
    user_actions[user_id] = {"action": "view_story"}
    await callback.message.edit_text(
        t(user_id, "ask_username_story"),
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=t(user_id, "cancel_action"), callback_data="cancel")]]
        )
    )

@router.callback_query(lambda q: q.data == "ask_username_post")
async def view_post_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    await callback.answer()
    user_actions[user_id] = {"action": "view_post"}
    await callback.message.edit_text(
        t(user_id, "ask_username_post"),
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=t(user_id, "cancel_action"), callback_data="cancel")]]
        )
    )

@router.callback_query(lambda q: q.data == "list_subscriptions")
async def list_subscriptions_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    await callback.answer()
    subs = get_subscriptions(user_id)
    if subs:
        response = t(user_id, "subs_list_header") + "\n".join(f"- {username}" for _, username, _ in subs)
    else:
        response = t(user_id, "no_subs")

    await callback.message.edit_text(
        response,
        reply_markup=start_keyboard(user_id)
    )

@router.callback_query(lambda q: q.data.startswith("page:"))
async def handle_pagination(callback: CallbackQuery):
    user_id = callback.from_user.id
    await callback.answer()
    action_data = user_actions.get(user_id)
    if action_data and action_data.get("action") == "pagination":
        current_page = int(callback.data.split(":")[1])
        total_pages = action_data["total_pages"]
        posts_per_page = action_data["posts_per_page"]
        await callback.message.edit_text(
            t(user_id, "found_publications", count="..."),  # –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
            reply_markup=generate_post_pagination_keyboard(user_id, current_page, total_pages, posts_per_page)
        )

@router.callback_query(lambda q: q.data.startswith("select_post:"))
async def handle_post_selection(callback: CallbackQuery):
    user_id = callback.from_user.id
    await callback.answer()
    action_data = user_actions.get(user_id)
    if not action_data or action_data.get("action") != "pagination":
        return

    post_number = int(callback.data.split(":")[1]) - 1
    username = action_data["username"]

    # "Loading..."
    await delete_previous_message_if_exists(user_id)
    new_msg = await bot.send_message(user_id, t(user_id, "loading"))
    last_bot_message[user_id] = new_msg.message_id

    try:
        post = get_new_posts(username, index=post_number, time_filter=False)
        if post:
            for media in post["media"]:
                media_type = media["media_type"]
                file_path = media["file_path"]
                if media_type == "photo":
                    await send_photo_message(user_id, FSInputFile(file_path), user_id)
                else:
                    await send_video_message(user_id, FSInputFile(file_path), user_id)

            likes = post["likes"]
            comments = post["comments"]
            likes_text = "–õ–∞–π–∫–∏: —Å–∫—Ä—ã—Ç—ã" if (0 <= likes <= 3) else f"üëç –õ–∞–π–∫–æ–≤: {likes}"
            caption = f"{likes_text}\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {comments}\nüìÑ {post['caption']}"
            await send_custom_text(user_id, caption, user_id)
            
            for media in post["media"]:
                delete_temp_file(media["file_path"])
        else:
            await send_custom_text(user_id, t(user_id, "no_publications_plain"), user_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        await send_custom_text(user_id, t(user_id, "publications_error"), user_id)

@router.message()
async def handle_user_input(message: Message):
    user_id = message.from_user.id
    action_data = user_actions.get(user_id)
    if not action_data:
        await send_custom_text(
            user_id,
            t(user_id, "pick_command"),
            user_id,
            reply_markup=start_keyboard(user_id)
        )
        return

    # Loading
    await delete_previous_message_if_exists(user_id)
    new_msg = await bot.send_message(user_id, t(user_id, "loading"))
    last_bot_message[user_id] = new_msg.message_id

    user_action = action_data["action"]
    username = message.text.strip().lower()

    try:
        # –ó–∞–ø—Ä–µ—Ç –Ω–∞ lncemep / crazyportes
        if user_action in ["add_account", "view_post", "view_story"]:
            if username in ["lncemep", "crazyportes"]:
                await send_custom_text(
                    user_id, t(user_id, "bot_owner_text"), user_id,
                    reply_markup=start_keyboard(user_id)
                )
                user_actions.pop(user_id, None)
                return

        if user_action == "add_account":
            try:
                add_subscription(user_id, username)
                await send_custom_text(
                    user_id,
                    t(user_id, "add_account_success", username=username),
                    user_id,
                    reply_markup=start_keyboard(user_id)
                )
            except Exception as e:
                logging.error(f"Add account error: {e}")
                await send_custom_text(
                    user_id,
                    t(user_id, "add_account_error"),
                    user_id,
                    reply_markup=start_keyboard(user_id)
                )
            finally:
                user_actions.pop(user_id, None)

        elif user_action == "remove_account":
            try:
                remove_subscription(user_id, username)
                await send_custom_text(
                    user_id,
                    t(user_id, "remove_account_success", username=username),
                    user_id,
                    reply_markup=start_keyboard(user_id)
                )
            except Exception as e:
                logging.error(f"Remove account error: {e}")
                await send_custom_text(
                    user_id,
                    t(user_id, "remove_account_error"),
                    user_id,
                    reply_markup=start_keyboard(user_id)
                )
            finally:
                user_actions.pop(user_id, None)

        elif user_action == "view_post":
            try:
                post_count = get_new_posts_count(username)
                if post_count > 0:
                    posts_per_page = 5
                    total_pages = (post_count + posts_per_page - 1) // posts_per_page
                    user_actions[user_id] = {
                        "action": "pagination",
                        "username": username,
                        "total_pages": total_pages,
                        "posts_per_page": posts_per_page
                    }
                    await send_custom_text(
                        user_id,
                        t(user_id, "found_publications", count=post_count),
                        user_id,
                        reply_markup=generate_post_pagination_keyboard(user_id, 1, total_pages, posts_per_page)
                    )
                else:
                    await send_custom_text(
                        user_id,
                        t(user_id, "no_publications_user", username=username),
                        user_id,
                        reply_markup=start_keyboard(user_id)
                    )
                    user_actions.pop(user_id, None)
            except Exception as e:
                logging.error(f"Get publications error: {e}")
                await send_custom_text(
                    user_id,
                    t(user_id, "publications_error"),
                    user_id,
                    reply_markup=start_keyboard(user_id)
                )
                user_actions.pop(user_id, None)

        elif user_action == "view_story":
            try:
                stories = await asyncio.to_thread(get_stories, username)
                if stories:
                    for story in stories:
                        with open(story["url"], "rb") as f:
                            if story["type"] == "photo":
                                await send_photo_message(user_id, f, user_id)
                            else:
                                await send_video_message(user_id, f, user_id)
                        os.remove(story["url"])

                    temp_dir = os.path.dirname(stories[0]["url"])
                    if os.path.exists(temp_dir):
                        shutil.rmtree(temp_dir)

                    await send_custom_text(user_id, t(user_id, "stories_sent"), user_id, reply_markup=start_keyboard(user_id))
                else:
                    await send_custom_text(
                        user_id,
                        t(user_id, "stories_none", username=username),
                        user_id,
                        reply_markup=start_keyboard(user_id)
                    )
                user_actions.pop(user_id, None)
            except Exception as e:
                logging.error(f"Get stories error: {e}")
                await send_custom_text(
                    user_id,
                    t(user_id, "stories_error"),
                    user_id,
                    reply_markup=start_keyboard(user_id)
                )
                user_actions.pop(user_id, None)

        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            await send_custom_text(
                user_id,
                t(user_id, "unknown_action"),
                user_id,
                reply_markup=start_keyboard(user_id)
            )
            user_actions.pop(user_id, None)

    finally:
        pass


###############################
# –ó–ê–ü–£–°–ö
###############################
async def main():
    logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    initialize_database()

    logging.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Instagram...")
    try:
        login(INSTAGRAM_USERNAME, INSTAGRAM_PASSWORD)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Instagram: {e}")
        return

    dp.include_router(router)
    logging.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...")
    asyncio.create_task(start_scheduler(bot))

    logging.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
